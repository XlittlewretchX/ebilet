import React, { useState, useEffect } from 'react';
import styles from './DateStrip.module.scss';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { ru } from 'date-fns/locale';

interface DateStripProps {
  onDateSelect: (date: string) => void;
  onRangeSelect: (start: string, end: string) => void;
}

const weekDays = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°'];

const getMonthDays = (year: number, month: number) => {
  const days = [];
  const date = new Date(year, month, 1);
  while (date.getMonth() === month) {
    days.push(new Date(date));
    date.setDate(date.getDate() + 1);
  }
  return days;
};

const months = [
  '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
  '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å',
];

const pad = (n: number) => n.toString().padStart(2, '0');
const formatDate = (date: Date) => `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;

const DateStrip: React.FC<DateStripProps> = ({ onDateSelect, onRangeSelect }) => {
  const today = new Date();
  const [calendarOpen, setCalendarOpen] = useState(false);
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [selectedRange, setSelectedRange] = useState<[Date | null, Date | null]>([null, null]);
  const [month, setMonth] = useState(today.getMonth());
  const [year, setYear] = useState(today.getFullYear());

  // –°–±—Ä–æ—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞/–¥–∏–∞–ø–∞–∑–æ–Ω —Å–±—Ä–æ—à–µ–Ω—ã)
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    // –ù–æ –ø—Ä–æ—â–µ: –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤–Ω–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    if (!selectedDate && !selectedRange[0] && !selectedRange[1]) return;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–±—Ä–æ—à–µ–Ω—ã –ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã (—á–µ—Ä–µ–∑ window —Å–æ–±—ã—Ç–∏–µ)
    const onReset = () => {
      setSelectedDate(null);
      setSelectedRange([null, null]);
    };
    window.addEventListener('reset-date-strip', onReset);
    return () => window.removeEventListener('reset-date-strip', onReset);
  }, [selectedDate, selectedRange]);

  const days = getMonthDays(year, month);
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –¥–Ω—ë–º –º–µ—Å—è—Ü–∞
  // –í JS –Ω–µ–¥–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è (0), –Ω–æ —É –Ω–∞—Å —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ (0 - –ü–ù)
  let firstDay = new Date(year, month, 1).getDay();
  if (firstDay === 0) firstDay = 7; // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ -> 7
  const emptyCells = Array(firstDay - 1).fill(null);

  const handleDateClick = (date: Date) => {
    setSelectedDate(date);
    setSelectedRange([null, null]);
    const formatted = formatDate(date);
    onDateSelect(formatted);
    onRangeSelect(formatted, formatted);
  };

  const handleCalendarChange = (dates: [Date | null, Date | null] | Date | null) => {
    if (Array.isArray(dates)) {
      setSelectedRange(dates);
      setSelectedDate(null);
      if (dates[0] && dates[1]) {
        onRangeSelect(formatDate(dates[0]), formatDate(dates[1]));
        setCalendarOpen(false);
      }
    } else if (dates instanceof Date) {
      setSelectedDate(dates);
      setSelectedRange([null, null]);
      const formatted = formatDate(dates);
      onDateSelect(formatted);
      setCalendarOpen(false);
    }
  };

  const prevMonth = () => {
    if (month === 0) {
      setMonth(11);
      setYear((y) => y - 1);
    } else {
      setMonth((m) => m - 1);
    }
  };
  const nextMonth = () => {
    if (month === 11) {
      setMonth(0);
      setYear((y) => y + 1);
    } else {
      setMonth((m) => m + 1);
    }
  };

  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const handleClear = () => {
    setSelectedDate(null);
    setSelectedRange([null, null]);
    onRangeSelect('', '');
    setCalendarOpen(false);
  };

  const CalendarModal = () => (
    <div className={styles.modalOverlay} onClick={() => setCalendarOpen(false)}>
      <div className={styles.modalContent} onClick={e => e.stopPropagation()}>
        <DatePicker
          selected={selectedDate}
          onChange={handleCalendarChange}
          startDate={selectedRange[0]}
          endDate={selectedRange[1]}
          selectsRange
          inline
          locale={ru}
          dateFormat="dd.MM.yyyy"
        />
        <div style={{display:'flex', gap:'1rem', marginTop:'1rem'}}>
          <button className={styles.closeBtn} onClick={() => setCalendarOpen(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
          <button className={styles.closeBtn} style={{background:'#e3eaff', color:'#2563eb'}} onClick={handleClear}>–û—á–∏—Å—Ç–∏—Ç—å</button>
        </div>
      </div>
    </div>
  );

  return (
    <div className={styles.dateStrip}>
      <div className={styles.monthBlock}>
        <button className={styles.arrow} onClick={prevMonth}>&#8592;</button>
        <span className={styles.monthLabel}>{months[month]} {year}</span>
        <button className={styles.arrow} onClick={nextMonth}>&#8594;</button>
      </div>
      <div className={styles.datesWrap}>
        <div className={styles.dates}>
          {days.map((date) => {
            const isToday = date.toDateString() === today.toDateString();
            const isSelected = selectedDate && date.toDateString() === selectedDate.toDateString();
            const weekDay = weekDays[(date.getDay() + 6) % 7]; // –ü–ù=0, ..., –í–°=6
            return (
              <button
                key={date.toISOString()}
                className={
                  styles.date +
                  (isSelected ? ' ' + styles.selected : '') +
                  (isToday ? ' ' + styles.today : '')
                }
                onClick={() => handleDateClick(date)}
              >
                <span className={styles.weekDay}>{weekDay}</span>
                <span className={styles.dayNum}>{date.getDate()}</span>
              </button>
            );
          })}
        </div>
      </div>
      <button className={styles.calendarBtn} onClick={() => setCalendarOpen(true)}>
        üìÖ
      </button>
      {calendarOpen && <CalendarModal />}
    </div>
  );
};

export default DateStrip; 